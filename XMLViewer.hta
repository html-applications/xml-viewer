<html>
<head>
<meta http-equiv=content-type content="text-html; charset=utf-8">
<meta http-equiv=MSThemeCompatible content=yes>
<hta:application
	id="idXMLViewer"
	applicationName="XML Viewer"
	icon="msxml3.dll"
	innerBorder="no"
	contextMenu="no"
	version="3.1.2"
	author="mozers™, mozers@mail.ru, icq#256106175"
	soauthor="JSman, icq#9166196"
	soauthor="Rumata, http://forum.script-coding.com"
 />
<style type="text/css">
	*             {font:8pt MS Shell Dlg; cursor:default;}                                              /*общие определения*/
	span.text     {color:black;}                                                                        /*текст пункта списка*/
	span.name     {color:buttonshadow; font-weight:bold;}                                               /*имя узла*/
	span.comment  {font:bold 10pt Verdana; cursor:text; margin-left:4px; color:#999999}                 /*комментарий*/
	span.aname    {color:red; margin-left:4px;}                                                         /*имя атрибута*/
	span.avalue   {color:#3300FC;}                                                                      /*значение атрибута*/
	div.children  {display:inline; font:bold 10pt Verdana; cursor:text; margin-left:4px; color:black;}  /*текст узла и дочерних*/

	li            {list-style-type:circle; color:threeddarkshadow;}            /*обычный пункт списка*/
	li.hidden     {list-style-type:square; background-color:#FFFF99;}          /*выделенный пункт списка*/

	li.srctext    {list-style-type:decimal; color:threeddarkshadow;}           /*пункт списка для ошибочного файла*/
	li.reason     {list-style-type:none; font:italic 8pt Georgia; color:blue;} /*текст пояснения о причине ошибки*/
	span.srctext  {color:black; font:bold 10pt Courier New;}                   /*текст строк ошибочного файла*/
	span.errtext  {color:red; font:bold 10pt Courier New;}                     /*текст строки после символа с ошибкой*/

	table.help    {position:relative; top:-8px; left:-8px; background-color:#FFFFCC; border:1px solid #999900;}                              /*подсказка*/
	div.help      {position:absolute; top:40px; left:expression(document.body.offsetWidth-idHelp.offsetWidth-40); background-color:#C0C0C0;} /*подсказка тень*/
	.help td.key  {font:normal 8pt Arial Black; color:#993300;}                                                                              /*подсказка клавиши*/
	.help td.text {font:8pt MS Shell Dlg; white-space:nowrap;}                                                                               /*подсказка текст*/
</style>
<xml id="idXSL">
<?xml version="1.0" ?>
<xsl:stylesheet version = "1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:template match="*">
	<ul><li>
		<span class="name"><xsl:value-of select="name()" /></span>
		<xsl:apply-templates select="@*" />
		<div class="children"><xsl:apply-templates /></div>
	</li></ul>
</xsl:template>
<xsl:template match="@*">
	<span class="aname"><xsl:value-of select="name()" /></span>
	<span class="text">:</span>
	<span class="avalue"><xsl:value-of select="." /></span>
</xsl:template>
<xsl:template match="comment()">
	<span class="comment"><xsl:value-of select="." /></span>
</xsl:template>
</xsl:stylesheet>
</xml>
<script type="text/javascript">
	var current_file = ''; // полный путь к текущему файлу

	// Возвращает ближайший родительский (относительно obj) объект с тегом parentTagName
	function GetParent(obj, parentTagName) {
		if (obj.tagName == 'BODY') return;
		return (obj.tagName==parentTagName) ? obj : GetParent(obj.parentNode, parentTagName);
	}

	// Выделение строки списка objLI и свертка дочерних строк
	function ToggleFold(){
		var oLI = GetParent(event.srcElement, 'LI');
		if (oLI) { // если найден родительский узел с тегом LI
			if (oLI.getElementsByTagName('LI').length > 0) { // если есть дочерние строки
				var hide = oLI.className != 'hidden';
				// смена стиля строки назначением|снятием класса 'hidden'
				oLI.className = (hide) ? 'hidden' : '';
				// скрытие|показ дочерних строк
				oLI.getElementsByTagName('DIV')[0].style.display = (hide) ? 'none' : '';
			}
		}
	}

	// Обработка нажатий на клавиши
	function OnKeyDown(){
		switch(event.keyCode){
			case 27: // Esc
				self.close();
				break;
			case 112: // F1
				idHelp.style.display = "";
				setTimeout('idHelp.style.display="none"', 4000); // через 4 секунды скрываем подсказку
				break;
			case 113: // F2
				DialogOpenFile();
				LoadXMLFile();
				break;
			case 121: // F10
				SetFileAssociation();
		}
	}

	// Замена стандартной ф-ции window.resizeTo, которая иногда может вызывать ошибку "Access is Denied"
	function WindowResizeTo(w, h) {
		try { 
			window.resizeTo(w, h); 
		} catch(e) {
			setTimeout(function() {WindowResizeTo(w, h)}, 1000);
		}
	}

	// Настройка размера окна (исходя из размера обрамляющей список таблицы idRange)
	function WindowSetSize(){
		var width_max = screen.width - 200;
		var height_max = screen.height - 100;
		var width = idRange.offsetWidth + 100;
		if (width > width_max) width = width_max;
		var height = idRange.offsetHeight + 80;
		if (height > height_max) height = height_max;
		WindowResizeTo(width, height);
	}

	// Загрузка XML документа
	function LoadXMLFile(){
		document.title = current_file + ' - ' + idXMLViewer.title;
		var xmlDoc = new ActiveXObject("Msxml2.DOMDocument");
		xmlDoc.async = false;
		xmlDoc.load (current_file);
		var err = xmlDoc.parseError;
		if (err.errorCode) {
			// показ XML как текста
			ParseError(err);
			WindowSetSize();
			document.body.scrollTop = idErrLine.offsetTop;
		} else {
			// парсинг XML документа
			idRange.innerHTML = xmlDoc.transformNode(idXSL);
			document.onclick = ToggleFold; // добавляем эвент для свертки строк
			WindowSetSize();
		}
	}

	// Диалог выбора имени файла.
	// Присваивает глобальной переменной current_file полный путь к выбранному файлу.
	function DialogOpenFile() {
		var fname = HtmlDlgHelper.openfiledlg("","","XML-документы (*.xml;*.xsl)|*.xml;*.xsl|Все файлы (*.*)|*.*|", "Открытие XML-документа");
		if (!fname) self.close(); // при отказе от выбора закрываем приложение
		idRange.innerHTML = '';
		current_file = fname;
	}

	// Действия при старте программы
	function on_load(){
		idXMLViewer.title = idXMLViewer.applicationName + ' v.' + idXMLViewer.version; // используем придуманное свойство title для хранения параметра (альтернатива глобальной переменной)
		document.title = idXMLViewer.title;
		// парсинг командной строки
		var fname = idXMLViewer.commandLine;
		fname = (/^"/.test(fname)) ? (fname.replace(/^"[^"]+"\s*/, '')) : (fname.replace(/^[^\s]+\s*/, ''));
		fname = fname.replace(/"/g, '');
		if (fname) {
			current_file = fname;
		} else {
			DialogOpenFile();
		}
		LoadXMLFile(); // загрузка XML документа
		setTimeout('idHelp.style.display="none"', 2000); // через 2 секунды скрываем подсказку
	}

</script>
</head>
<body onload="on_load()" onkeydown="OnKeyDown();">
	<object id=HtmlDlgHelper classid='clsid:3050F4E1-98B5-11CF-BB82-00AA00BDCE0B' width=0 height=0></object>
	<table><tr><td id="idRange"></table>
	<div id="idHelp" class="help">
		<table class="help">
			<tr><td class="key">&nbsp;Esc<td class="text">&nbsp;Exit Program
			<tr><td class="key">&nbsp;F1<td class="text">&nbsp;This Help
			<tr><td class="key">&nbsp;F2<td class="text">&nbsp;Load File
			<tr><td class="key">&nbsp;F10<td class="text">&nbsp;Set Associate XML-files&nbsp;
		</table>
	</div>
</body>
<script type="text/javascript">
	// Чтение текстового файла
	function ReadFile(filename, codepage) {
		var content = '';
		var FSO = new ActiveXObject("Scripting.FileSystemObject");
		if (FSO.FileExists(filename)) {
			if (FSO.GetFile(filename).Size > 0) {
				with (new ActiveXObject("ADODB.Stream")) {
					type = 2; // adTypeText
					charset = codepage;
					open();
					loadFromFile(filename);
					content = readText();
					close();
				}
			}
		}
		return content;
	}

	// Обработка ошибки загрузки (показ XML как текста)
	function ParseError(err){
		function tags2text(htm) {return htm.replace(/</g, '&lt;')};
		var text = ReadFile(current_file, 'windows-1251');
		if (/Р.Р.Р./.test(text)) text = ReadFile(current_file, 'utf-8');
		var arrXML = text.match(/[^\r\n]+/g);
		var html = [];
		for(var i = 0, line; line = arrXML[i++];) {
			html[i] = '<LI class="srctext"';
			if (i == err.line) { // подсветка строки с ошибкой
				html[i] += ' id="idErrLine" style="background-color:yellow">';
				var err_line_text = line.match(new RegExp('^(.{'+(err.linepos-1)+'})(.*)$'));
				html[i] += '<SPAN class="srctext">' + tags2text(err_line_text[1]) + '</SPAN>';
				html[i] += '<SPAN class="errtext">' + tags2text(err_line_text[2]) + '</SPAN>'; // текст после ошибочного символа
				html[i] += '<UL><LI class="reason">' + err.reason + '</LI></UL></LI>';         // пояснение о причине ошибки
			} else {
				html[i] += '><SPAN class="srctext">' + tags2text(line) + '</SPAN></LI>';
			}
		}
		idRange.innerHTML = '<UL>' + html.join('') + '</UL>';
	}

	// Связывание программы с xml и xsl файлами
	function SetFileAssociation(){
		var WshShell = new ActiveXObject("WScript.Shell");
		var xml_viever_cmd = 'mshta.exe "' + unescape(document.URL).replace(/^file:\/\/(.+)$/, '$1') + '" %1';
		var cmd = '';
		try {
			cmd = WshShell.RegRead('HKCR\\xmlfile\\shell\\Open\\command\\');
		} catch(e) {}
		if (cmd != xml_viever_cmd) {
			if (WshShell.Popup('Associate XML, XSL files with the XMLViewer?', 0, "Set file association", 36) == 6) {
				var this_path = unescape(document.URL).replace(/^file:\/\/(.+?)[^\\]+$/, '$1');
				WshShell.Run('regedit \/E "' + this_path + 'return_xml_association.reg" "HKEY_CLASSES_ROOT\\xmlfile\\shell\\Open"', 0, true);
				WshShell.Run('regedit \/E "' + this_path + 'return_xsl_association.reg" "HKEY_CLASSES_ROOT\\xslfile\\shell\\Open"', 0, true);
				RegDeleteKeys("HKCR\\xmlfile\\shell\\Open\\ddeexec");
				RegDeleteKeys("HKCR\\xslfile\\shell\\Open\\ddeexec");
				WshShell.RegWrite('HKCR\\xmlfile\\shell\\Open\\', '');
				WshShell.RegWrite('HKCR\\xmlfile\\shell\\Open\\command\\', xml_viever_cmd, 'REG_EXPAND_SZ');
				WshShell.RegWrite('HKCR\\xslfile\\shell\\Open\\', '');
				WshShell.RegWrite('HKCR\\xslfile\\shell\\Open\\command\\', xml_viever_cmd, 'REG_EXPAND_SZ');
			}
		}
	}

	// Удаление ключа реестра (включая все вложенные)
	function RegDeleteKeys(strFullPath){
		function DeleteSubkeys (subKey){
			var oMethod = oReg.Methods_.Item("EnumKey");
			var oInParam = oMethod.InParameters.SpawnInstance_();
			oInParam.hDefKey = defKey;
			oInParam.sSubKeyName = subKey;
			var oOutParam = oReg.ExecMethod_(oMethod.Name, oInParam);
			if (oOutParam.sNames != null) {
				var aNames = oOutParam.sNames.toArray();
				for (var i=0, keyName; keyName = aNames[i++];) {
					DeleteSubkeys(subKey + "\\" + keyName);
				}
			}
			oReg.DeleteKey (defKey, subKey);
		}
		// ----------------------------------------------------------------
		var aKeyPath = strFullPath.match(/^([\w_]+)\\(.+)$/);
		if (!aKeyPath) return;
		var aRoot = {HKEY_LOCAL_MACHINE:  0x80000002, HKLM: 0x80000002
					,HKEY_USERS:          0x80000003, HKU:  0x80000003
					,HKEY_CURRENT_USER:   0x80000001, HKCU: 0x80000001
					,HKEY_CLASSES_ROOT:   0x80000000, HKCR: 0x80000000
					,HKEY_CURRENT_CONFIG: 0x80000005, HKCC: 0x80000005}
		var defKey = aRoot[aKeyPath[1]];
		if (!defKey) return;
		var oReg = GetObject("winmgmts:\\\\.\\root\\default:StdRegProv");
		DeleteSubkeys (aKeyPath[2]);
	}
</script>
</html>
